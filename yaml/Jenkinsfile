// podTemplate(yaml: readTrusted('yaml/pod.yaml')) {
//   node(POD_LABEL) {   
//     stage('Run shell') {
//         sh "echo hello world"
//         sh "pwd && ls -l ./"
//         script {
//             build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
//             }
//           }
//     stage('Build Docker image') {
//       container('busybox') {
//         sh "echo hello from $POD_CONTAINER"
//         sh "pwd && ls -l ./"
//         echo "${build_tag}"
//       }
//     }
//   }
// }
// 声明式Pipeline
pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes'
      slaveConnectTimeout 1200
      //inheritFrom 'mypod' // 指定pod 模板, 如果不指定可以通过yamlfile指定文件
      workspaceVolume hostPathWorkspaceVolume(hostPath: "/home/jenkins/agent", readOnly: false)   //持久化本地目录
      yamlFile 'yaml/pod.yaml'
    }
  }
  environment { 
        REPO_HTTP = 'http://10.4.56.155/ops/k8s.git'
        GIT_AUTH_ID = 'ea2f709f-9cac-4978-aeb2-9fc37e8e9667'
        HARBOR_ADDRESS = 'myregistry.io:8088'
        HARBOR_AUTH = credentials('harborAuth')
        IMAGE_NAME = 'my-python-demo'
    }
  parameters {
    gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'Name', type: 'PT_BRANCH'  //Name git 参数名称
    choice(
      name: 'ACTION',  //ACTION 选择参数名称
      description: '执行动作: \nbuild: 只构建镜像，不发布\ndeploy: 构建镜像并发布更新到开发环境',
      choices: ['deploy','build']
    )
  }
  stages {
    stage('Prepare') {
      steps {
        println "开始对分支 ${params.Name} 进行构建"
      }
    }
    stage("Pulling Code"){
      parallel {
        stage("Pulling Code by Jenkins"){
          steps{
              // sh '''
              // pwd && id
              // '''
              //检出代码
              git branch: "${params.Name}", credentialsId: "${GIT_AUTH_ID}", url: "${REPO_HTTP}"
              script {
                  COMMIT_ID = sh(
                    returnStdout: true,
                    script: "git log -n 1 --pretty=format:'%h'"
                  ).trim()
                  TAG = "${params.Name}" + '-' + COMMIT_ID
                  println "Current branch is ${params.Name}, Commit ID is ${COMMIT_ID}, Image TAG is ${TAG}"
                }
          }
        }
      }
    }
    stage('Building') {
      when {
        expression { params.ACTION ==~ /(build|deploy)/ }
      }
      steps {
        container(name: 'jnlp') {
          sh "java -version"
        }
      }
    }
    stage("Docker build for creating image"){
      steps {
        container('nerdctl') {   //指定容器
          sh '''
          set +x
          update-ca-certificates
          nerdctl login -u ${HARBOR_AUTH_USR} -p ${HARBOR_AUTH_PSW}  ${HARBOR_ADDRESS}
          '''
          sh "nerdctl build  -t ${HARBOR_ADDRESS}/library/${IMAGE_NAME}:${TAG} ."
          sh "nerdctl push ${HARBOR_ADDRESS}/library/${IMAGE_NAME}:${TAG}"
        }
      }
    }
    stage('Deploying to K8s') {
      when {
        expression { params.ACTION == 'deploy' }
      }
      steps {
        container('kubectl') {
          echo "1111"
          sh "kubectl get pod"
        }
      }
    }
  }
    
}